// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id                Int     @id @default(autoincrement())
  username          String  @unique
  password          String
  email             String? @unique
  is_admin          Boolean @default(false)
  profile_photo_url String?
  avatar_url        String?
  full_name         String?
  ethiopian_phone   String?
  gamesPlayed       Int     @default(0)
  wins              Int     @default(0)
  losses            Int     @default(0)
  favorite_game     String?
  controller_id     String?

  // Relations
  tournaments        Tournament[]   @relation("TournamentAdmin")
  participants       Participant[]
  matches_as_player1 Match[]        @relation("Player1")
  matches_as_player2 Match[]        @relation("Player2")
  winners            Match[]        @relation("Winner")
  rankings           Ranking[]
  notifications      Notification[]

  @@map("users")
}

model Tournament {
  id          Int     @id @default(autoincrement())
  name        String
  admin_id    Int
  max_players Int
  is_open     Boolean @default(true)

  // Relations
  admin         User           @relation("TournamentAdmin", fields: [admin_id], references: [id], onDelete: Cascade)
  participants  Participant[]
  matches       Match[]
  rankings      Ranking[]
  notifications Notification[]
  Round         Round[]

  @@map("tournaments")
}

model Participant {
  id            Int      @id @default(autoincrement())
  user_id       Int
  tournament_id Int
  applied_at    DateTime @default(now())
  losses        Int      @default(0)
  bye_count     Int      @default(0)

  // Relations
  user       User       @relation(fields: [user_id], references: [id], onDelete: Cascade)
  tournament Tournament @relation(fields: [tournament_id], references: [id], onDelete: Cascade)

  @@unique([user_id, tournament_id])
  @@map("participants")
}

model Round {
  id            Int       @id @default(autoincrement())
  tournament_id Int
  round_number  Int
  is_completed  Boolean   @default(false)
  start_time    DateTime?
  end_time      DateTime?

  // Relations
  tournament Tournament @relation(fields: [tournament_id], references: [id], onDelete: Cascade)
  matches    Match[]

  @@map("rounds")
}

model Match {
  id            Int     @id @default(autoincrement())
  tournament_id Int
  round_id      Int
  player1_id    Int?
  player2_id    Int?
  winner_id     Int?
  score         String? // e.g., "2-1"

  // Relations
  tournament Tournament @relation(fields: [tournament_id], references: [id], onDelete: Cascade)
  round      Round      @relation(fields: [round_id], references: [id], onDelete: Cascade)
  player1    User?      @relation("Player1", fields: [player1_id], references: [id], onDelete: Cascade)
  player2    User?      @relation("Player2", fields: [player2_id], references: [id], onDelete: Cascade)
  winner     User?      @relation("Winner", fields: [winner_id], references: [id], onDelete: SetNull)

  @@map("matches")
}

model Ranking {
  id            Int @id @default(autoincrement())
  user_id       Int
  tournament_id Int
  rank          Int

  // Relations
  user       User       @relation(fields: [user_id], references: [id], onDelete: Cascade)
  tournament Tournament @relation(fields: [tournament_id], references: [id], onDelete: Cascade)

  @@map("rankings")
}

model Notification {
  id            Int      @id @default(autoincrement())
  user_id       Int
  tournament_id Int
  message       String
  created_at    DateTime @default(now())

  // Relations
  user       User       @relation(fields: [user_id], references: [id], onDelete: Cascade)
  tournament Tournament @relation(fields: [tournament_id], references: [id], onDelete: Cascade)

  @@map("notifications")
}
